diff --git i/drbd/drbd_main.c w/drbd/drbd_main.c
index e207d805..f6e2f945 100644
--- i/drbd/drbd_main.c
+++ w/drbd/drbd_main.c
@@ -3141,6 +3141,8 @@ static void peer_ack_timer_fn(unsigned long data)
 
 	drbd_flush_peer_acks(resource);
 }
+static inline int     peer_ack_timer_fn_win(KDPC *dpc, void * data, void *sysarg1, void *sysarg2) { (void)dpc; (void)sysarg1; (void)sysarg2;     peer_ack_timer_fn((ULONG_PTR)data); return STATUS_SUCCESS; }
+static inline int      md_sync_timer_fn_win(KDPC *dpc, void * data, void *sysarg1, void *sysarg2) { (void)dpc; (void)sysarg1; (void)sysarg2;      md_sync_timer_fn((ULONG_PTR)data); return STATUS_SUCCESS; }
 
 void conn_free_crypto(struct drbd_connection *connection)
 {
@@ -3252,8 +3254,8 @@ struct drbd_resource *drbd_create_resource(const char *name,
 	INIT_LIST_HEAD(&resource->connections);
 	INIT_LIST_HEAD(&resource->transfer_log);
 	INIT_LIST_HEAD(&resource->peer_ack_list);
-	setup_timer(&resource->peer_ack_timer, peer_ack_timer_fn, (unsigned long) resource);
-	setup_timer(&resource->repost_up_to_date_timer, repost_up_to_date_fn, (unsigned long) resource);
+	setup_timer(&resource->peer_ack_timer, peer_ack_timer_fn_win, (unsigned long) resource);
+	setup_timer(&resource->repost_up_to_date_timer, repost_up_to_date_fn_win, (unsigned long) resource);
 	sema_init(&resource->state_sem, 1);
 	resource->role[NOW] = R_SECONDARY;
 	if (set_resource_options(resource, res_opts))
@@ -3269,11 +3271,11 @@ struct drbd_resource *drbd_create_resource(const char *name,
 	init_waitqueue_head(&resource->twopc_wait);
 	init_waitqueue_head(&resource->barrier_wait);
 	INIT_LIST_HEAD(&resource->twopc_parents);
-	setup_timer(&resource->twopc_timer, twopc_timer_fn, (unsigned long) resource);
+	setup_timer(&resource->twopc_timer, twopc_timer_fn_win, (unsigned long) resource);
 	INIT_LIST_HEAD(&resource->twopc_work.list);
 	INIT_LIST_HEAD(&resource->queued_twopc);
 	spin_lock_init(&resource->queued_twopc_lock);
-	setup_timer(&resource->queued_twopc_timer, queued_twopc_timer_fn, (unsigned long) resource);
+	setup_timer(&resource->queued_twopc_timer, queued_twopc_timer_fn_win, (unsigned long) resource);
 	drbd_init_workqueue(&resource->work);
 	drbd_thread_init(resource, &resource->worker, drbd_worker, "worker");
 	drbd_thread_start(&resource->worker);
@@ -3334,7 +3336,7 @@ struct drbd_connection *drbd_create_connection(struct drbd_resource *resource,
 
 	INIT_LIST_HEAD(&connection->connect_timer_work.list);
 	setup_timer(&connection->connect_timer,
-		    connect_timer_fn,
+		    connect_timer_fn_win,
 		    (unsigned long) connection);
 
 	drbd_thread_init(resource, &connection->receiver, drbd_receiver, "receiver");
@@ -3447,13 +3449,13 @@ struct drbd_peer_device *create_peer_device(struct drbd_device *device, struct d
 	}
 
 	init_timer(&peer_device->start_resync_timer);
-	peer_device->start_resync_timer.function = start_resync_timer_fn;
+	peer_device->start_resync_timer.function = start_resync_timer_fn_win;
 	peer_device->start_resync_timer.data = (unsigned long) peer_device;
 
 	INIT_LIST_HEAD(&peer_device->resync_work.list);
 	peer_device->resync_work.cb  = w_resync_timer;
 	init_timer(&peer_device->resync_timer);
-	peer_device->resync_timer.function = resync_timer_fn;
+	peer_device->resync_timer.function = resync_timer_fn_win;
 	peer_device->resync_timer.data = (unsigned long) peer_device;
 
 	INIT_LIST_HEAD(&peer_device->propagate_uuids_work.list);
@@ -3551,9 +3553,9 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 
 	init_timer(&device->md_sync_timer);
 	init_timer(&device->request_timer);
-	device->md_sync_timer.function = md_sync_timer_fn;
+	device->md_sync_timer.function = md_sync_timer_fn_win;
 	device->md_sync_timer.data = (unsigned long) device;
-	device->request_timer.function = request_timer_fn;
+	device->request_timer.function = request_timer_fn_win;
 	device->request_timer.data = (unsigned long) device;
 
 	init_waitqueue_head(&device->misc_wait);
