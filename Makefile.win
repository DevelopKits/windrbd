# vim: set ft=make ts=8 sw=8 noet :

WIN_CFLAGS += /c /nologo /W4 
WIN_CFLAGS += /Zi # /Zi gives us a PDB file; without that we'd get debug information in the .obj file instead
WIN_CFLAGS += /WX # warnings == errors
WIN_CFLAGS += /Wv:18 # disable hides previous local declaration
WIN_CFLAGS += /Od # disable optimizations
WIN_CFLAGS += /Oi # enable intrinsic functions
WIN_CFLAGS += /Oy- # enable frame pointer omission
# WIN_CFLAGS += /D _X86_=1 /D i386=1 # 32bit
WIN_CFLAGS += /D _WIN64 /D _AMD64_ /D AMD64 /D _M_AMD64 # 64bit
WIN_CFLAGS += /D STD_CALL /D DEPRECATE_DDK_FUNCTIONS=1 /D MSC_NOOPT /D _WIN32_WINNT=0x0601 /D WINVER=0x0601 /D WINNT=1 /D NTDDI_VERSION=0x06010000 /D DBG=1 /D KMDF_VERSION_MAJOR=1 /D KMDF_VERSION_MINOR=15 
WIN_CFLAGS += /GF /Gm- /Zp8 /GS /Gy 
# /fp:precise  # precise - "precise" floating-point model; results are predictable
WIN_CFLAGS += /Zc:wchar_t- /Zc:forScope /Zc:inline /GR- 
# On x64, there's only one calling convention. https://msdn.microsoft.com/en-us/library/zthk2dkh.aspx
# WIN_CFLAGS += /Gz # __stdcall calling convention  -- is default
# WIN_CFLAGS += /Gr # __fastcall calling convention -- is what we want for linux compat
WIN_CFLAGS += /wd4748 /wd4603 /wd4627 /wd4986 /wd4987 /wd4996 
WIN_CFLAGS += /analyze- /errorReport:queue /kernel -cbstring /d1import_no_registry /d2AllowCompatibleILVersions /d2Zi+ 
WIN_CFLAGS += /D __KERNEL__=1
WIN_CFLAGS += /D __BYTE_ORDER=1 /D __LITTLE_ENDIAN=1 /D __LITTLE_ENDIAN_BITFIELD

# WIN_CFLAGS += /Ze # Microsoft extensions - eg. nameless struct/union. Not enabled because
#   The /Ze option is deprecated because its behavior is on by default. We recommend you use the /Zc (Conformance) compiler options to control specific language extension features.
# but there's no setting for that.
WIN_CFLAGS += /wd4201

# drbd-headers\drbd_protocol.h(466): warning C4200: nonstandard extension used: zero-sized array in struct/union
WIN_CFLAGS += /wd4200


# CL.exe takes (AND RETURNS) forward slashes; that makes navigating an error output easy.
WIN_INCLUDE_DIRS += -I "../../ewdk-include/10.0.14393.0/shared"
WIN_INCLUDE_DIRS += -I "../../ewdk-include/10.0.14393.0/km"
WIN_INCLUDE_DIRS += -I "../../ewdk-include/10.0.14393.0/km/crt"
WIN_INCLUDE_DIRS += -I "../../ewdk-include/10.0.14393.0/um"
WIN_INCLUDE_DIRS += -I "../overrides"
WIN_INCLUDE_DIRS += -I "."
WIN_INCLUDE_DIRS += -I "../drbd-headers"
WIN_INCLUDE_DIRS += -I "drbd-kernel-compat"

WIN_CFLAGS += $(WIN_INCLUDE_DIRS)

WIN_DEF_INCLUDES += /FI"../../ewdk-include/10.0.14393.0/shared/warning.h"  # include that file
WIN_DEF_INCLUDES += /FI"linux/types.h"
WIN_DEF_INCLUDES += /FI"generic_compat_stuff.h"
WIN_DEF_INCLUDES += /FI"wingenl.h"
WIN_DEF_INCLUDES += /FI"drbd_windows.h"

WIN_CFLAGS += -D _WIN64=1
WIN_CFLAGS += -D COMPAT_HAVE_BOOL_TYPE=1 # for "typedef bool" in drbd/linux/lru_cache.h
# WIN_CFLAGS += -D _AMD64_=1

WIN_CFLAGS += /D CONFIG_KREF_DEBUG=1

VC := /cygdrive/c/Windows/System32/cmd.exe /c ms-cl.cmd
# /a      for debugging output


# How to calculate the debug name
fPDB = $(patsubst %.c,%.pdb,$(1))


all: drbd.sys

drbd.sys: $(patsubst %.c,%.obj,$(wildcard *.c))
	$(VC) $(WIN_LDFLAGS) "$^" /Fo:"$@"

ifeq ($(shell uname -o),Cygwin)
    %.obj: %.c
	rm -f "$(call fPDB,$<)"
	$(VC) $(WIN_CFLAGS) $(WIN_DEF_INCLUDES) "$<" /c /Fo:"$@" /Fd:"$(call fPDB,$<)"
# /Fi:"$(patsubst %.c,%.E,$<)" ...  cl : Command line warning D9007 : '/Fi:' requires '/P'; option ignored
	echo "-- $@ done --"

    %.E: %.c
	$(VC) $(WIN_CFLAGS) $(WIN_DEF_INCLUDES) "$<" /E > "$@"

util.obj: WIN_DEF_INCLUDES:=/FI"linux/types.h" /FI"generic_compat_stuff.h" /FI"wingenl.h"
endif

