------------------------------------------------------------------------

All drbd devices are called drbd (without a number). The sprintf is wrong
This should be easy to fix. Update: but where are they in the WinObj
object hierachy?

Update: They are the devices themselves (all of them) so even I/O
from/to the System partition (C:) goes through the WDRBD driver.

------------------------------------------------------------------------

Note: The functions enclosed by _WIN32_MVFL (see win4lin/src/util.c) are
not referenced anywhere in the code. I assume that they never have been
tested. I would like to remove them (or at least rewrite them if the
functionality is needed) since they depend on some other stuff I would
like to redesign.

Update: We need the functionality if DeviceIoControl() (user level function)
is called on the DRBD device. So leave it in for now.

-------------------------------------------------------------------------

make install on userland tools (drbd-utils): 2 minor issues:
	Under cygwin it tries to install to //usr/local/sbin while
	this should be /usr/local/sbin (cygwin doesn't handle double
	slashes correctly, this is normally done by the Linux kernel).

	Workaround (for now) is to use 
		make install DESTDIR=""

	It also fails (correcly, I suppose) to set the UNIX permissions
	on the resulting EXE files, this step should be skipped. For
	now this can be ignored since the EXE files are installed correctly.

-------------------------------------------------------------------------

Kernel really should report an error if Bind() fails. 
	For example if the local IP address does not exist.

-------------------------------------------------------------------------

I am not sure how drbdmeta should work on wdrbd while a drbd device 
is attached, since there is no way (?) to access the lower level
device directly (and access the meta data).

-------------------------------------------------------------------------

Driver blue screens when backing device contains no meta data (and
	meta data is internal)

Last output was:

Aug 28 15:07:59 192.168.56.101  U21:39:03.969|0131c040 drbd_md_sync_page_io <7>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): meta_data io: drbdcmd [20037696]:drbd_md_sync_page_io(,20472s,READ) FFFFF8800181DF9DS
Aug 28 15:07:59 192.168.56.101  U21:39:04.000|0131c040 drbd_md_read <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): Meta data magic not found. Did you "drbdadm create-md"?


-------------------------------------------------------------------------

SOLVED: Windows does not boot any more once DRBD driver is installed. 

It fails at loading drbd.sys (shown by Windows 7 repair utility).

It also fails if the driver does nothing (return SUCCESS right at the
	beginning)

Update: When not checking for driver signatures (press F8
	and then select disable signature check near the bottom)
	Windows doesn't blue screen, but it hangs on boot.
	No log output is seen.
	If the driver does nothing (and signatures are disabled)
	Windows bluescreens.

It seems that the driver is running but shows no log output over 
syslog (else changing it to doing nothing won't help).

Update: When switching to boot log (Don't start GUI in msconfig.exe
Boot tab) it shows that drbd.sys is loaded (when not checking signatures)
correctly, but then avdevprot.sys (Avira Virus Scanner) blocks the
boot.

Update: Not true. The GUI just does not start after CLASSPNP.sys is
loaded. Revert to original source and see if the problem persists.

Update: Windows boots normally with original driver (and disable
	signature check). Probably logging loop (DbgPrintEx)?

Update: It was the SocketsInit() function hanging forever. Now
	calling SocketsInit() in netlink thread (which works, it
	seems that Windows kernel threads are started only when 
	the GUI is started) and reverted printk_init to keep
	trying to initialize in printk itself.

	Problem solved for now.

-----------------------------------------------------------------------

SOLVED: /dev/sda and /dev/sdb are sometimes swapped.

This is something we probably can't fix, but we need to map the devices
properly to the internal windows kernel device names.

Update: This should be addressed somehow, since drbdmeta expects these
filenames (UNIX-type), while the kernel should receive NT ObjectManager
internal pathes only (\Device\HarddiskVolume<n>, or \DosDevices\D: or
so). I still think that it is a bad idea to use /dev/sda3 style in
DRBD config, since they change when the system is rebooted (At least
on Windows 7).

Update: Since /dev/sd[ab] just follow windows NT internal enumeration
(which also swaps) to \Device\Harddisk[01]\Partition<n> this is not a
CygWin problem. What remains constant, however is the enumeration in 
the target objects \Device\HarddiskPartition<n> (only the symbolic
link directory \Device\Harddisk<n> is sometimes swapped).

Update: Patch for drbdmeta is there, need to beautify (separate
	file) and merge into upstream wdrbd branch.

Done.

--------------------------------------------------------------------------

CLOSED: AddDevice is called when any Block Device is created on the system. For
example when a new partition is created (probably also when a USB disk is
attached, didn't test that). It seems to me that it should check if the 
newly created device is a drbd device (/dev/drbdN). 

Update: It seems that AddDevice is not called for new DRBD devices (on
	drbdadm up), so we can close this one.

--------------------------------------------------------------------------

SOLVED: drbdadm up fails if the backing device was newly created with the
	partition manager.

Kernel log says: 

Aug 16 19:32:57 192.168.56.101  U16:25:44.600|0131b660 open_backing_dev <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): open("\Device\HarddiskVolume5") failed with -13

Relevant data from drbd.conf:

device /dev/sda3 

(this partition was just created and drbdadm create-md didn't fail)

Now trying to reboot and see if the problem persists.

Update: after reboot /dev/sda and /dev/sdb are swapped, so we changed 
it to: 

device /dev/sda3 

However, same problem (rebooting didn't fix it)

Aug 17 18:37:21 192.168.56.101  U16:21:17.664|01321040 open_backing_dev <3>drbd w0/17 minor 26, ds(Diskless), dvflag(0x0): open("\Device\HarddiskVolume5") failed with -13

Update: Some printk's showed that pvext list is empty in blkdev_get_by_link.

Update: Research showed that AddDevice (and AddDeviceList) is only called
for devices that are created while the driver is already running (at least
on my Windows box). For example if you create a new partition on a hard 
drive and drbd is loaded, the AddDevice handler is called, but only for
that newly created device. Hence at the point in time the driver is
started, the internal list of devices is empty (existing volumes don't
show up in the list). 

I am not sure if the win4lin internal duplication is really needed. I will
check and remove it (replacing it by something like FindVolumeByName(),
I am sure there is something in the NT kernel). 

Update: There is something: see 
https://stackoverflow.com/questions/45743841/getting-windows-nt-kernel-object-by-name-from-within-a-kernel-driver

What I suggest is to always use kernel internal namespace, also on the
netlink interface. It is then drbdsetup's duty to convert the various
existing namespaces to Windows NT kernel names. For example: 
"D:" -> "\DosDevices\D:"

I am not sure if we should support the UNIX naming convention at all
(/dev/sda1, ...) since it gets shuffled during reboots (/dev/sda sometimes
becomes /dev/sdb). Most safe operation probably is to use the GUID namespace:

\DosDevices\Volume{GUID}

Since the \DosDevices entries are SymLinks (yes NT has symlinks internally!)
we need to resolve them to finally get to the destination object. Then
we need to make sure that it is really a disk partition. 

If we are lucky this works also with network drives. Update: it won't
since SMB is a file based protocol. Same thing as drbd for linux cannot
have NFS backing devices.

Update: Need to reboot Windows after installing the DRBD driver, so
it gets the device list from the PNP manager. This is very common
for Windows drivers (reboot required) so we leave it like this.

However when the backing device is created while windows is running
(like when a partition is created with Partition manager or maybe
USB disk (didn't try that)) reboot is not required.

-------------------------------------------------------------------------

SOLVED: drbdadm down hangs on a partially configured resource

Resource was configured partially (failed because disk didn't exist: kernel
log: 
Aug 17 18:14:47 192.168.56.101  U16:14:37.177|01321b50 get_targetdev_volsize <3>[0xFFFFFA8001321B50] TargetDeviceObject is null!
this behaves as expected).

Further drbdadm up failed with:

$ ./drbd-up.sh
w0: Failure: (162) Invalid configuration request
additional info from kernel:
peer connection already exists
Command '/tmp/drbd/bin/drbdsetup new-peer w0 1 --_name=ubuntu-gnome --use-rle=no --protocol=A' terminated with exit code 10

The down command was never completed:
$ ./drbd-op.sh down
w0: timed out waiting for reply
Command '/tmp/drbd/bin/drbdsetup down w0' terminated with exit code 20

kernel log:

Aug 17 18:15:44 192.168.56.101  U16:15:34.140|01321b50 NetlinkWorkThread <6>[0xFFFFFA8001321B50] done
Aug 17 18:16:37 192.168.56.101  U16:16:27.275|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_GET_RESOURCES:30)
Aug 17 18:16:37 192.168.56.101  U16:16:27.275|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_GET_DEVICES:31)
Aug 17 18:16:37 192.168.56.101  U16:16:27.291|0131b660 NetlinkWorkThread <6>[0xFFFFFA800131B660] drbd cmd(DRBD_ADM_DOWN:27)
Aug 17 18:16:37 192.168.56.101  U16:16:27.291|038c91c0 win_drbd_thread_setup <6>[0xFFFFFA80038C91C0] stopped.

Update: drbdadm down also hangs on a completely configured resource.

We should solve this next, so we need less reboots.

Reason is that complete is not called (in fact drbd_thread_setup isn't
used at all). We now call drbd_thread_setup in win_drbd_thread_setup 
as the function. Now it blue screens but one step further.

Update: Calling drbd_thread_setup within win_drbd_thread_setup fixed
this problem.

-------------------------------------------------------------------------

SOLVED: Driver blue screens on drbdadm detach

Solved. There were some little issues, see git log.

