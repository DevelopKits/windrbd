diff --git a/drbd/.drbd_int.h.swp b/drbd/.drbd_int.h.swp
deleted file mode 100644
index 01acb42..0000000
Binary files a/drbd/.drbd_int.h.swp and /dev/null differ
diff --git a/drbd/.drbd_req.c.swp b/drbd/.drbd_req.c.swp
deleted file mode 100644
index dcc81d7..0000000
Binary files a/drbd/.drbd_req.c.swp and /dev/null differ
diff --git a/drbd/_drbd.ilk b/drbd/_drbd.ilk
index 3764539..9ee5b4d 100755
Binary files a/drbd/_drbd.ilk and b/drbd/_drbd.ilk differ
diff --git a/drbd/drbd.cat b/drbd/drbd.cat
index 1122822..1555a48 100755
Binary files a/drbd/drbd.cat and b/drbd/drbd.cat differ
diff --git a/drbd/drbd.sys b/drbd/drbd.sys
index 89abc70..8bdde7f 100755
Binary files a/drbd/drbd.sys and b/drbd/drbd.sys differ
diff --git a/drbd/drbd_actlog.c b/drbd/drbd_actlog.c
index c1e7c2a..4c526dc 100644
--- a/drbd/drbd_actlog.c
+++ b/drbd/drbd_actlog.c
@@ -239,6 +239,8 @@ int drbd_md_sync_page_io(struct drbd_device *device, struct drbd_backing_dev *bd
 	     (unsigned long long)sector, (op == REQ_OP_WRITE) ? "WRITE" : "READ",
 	     (void*)_RET_IP_ );
 
+printk(KERN_DEBUG "sector: %llx first sector: %llx last sector: %llx\n", sector, drbd_md_first_sector(bdev), drbd_md_last_sector(bdev));
+
 	if (sector < drbd_md_first_sector(bdev) ||
 	    sector + 7 > drbd_md_last_sector(bdev))
 		drbd_alert(device, "%s [%d]:%s(,%llus,%s) out of range md access!\n",
diff --git a/drbd/drbd_int.h b/drbd/drbd_int.h
index f6adb9c..2abad1c 100644
--- a/drbd/drbd_int.h
+++ b/drbd/drbd_int.h
@@ -1988,7 +1988,7 @@ static inline void drbd_set_my_capacity(struct drbd_device *device,
 {
 	/* set_capacity(device->this_bdev->bd_disk, size); */
 	if (device && device->this_bdev && device->this_bdev)
-	device->this_bdev->d_size = size << 9;
+		device->this_bdev->d_size = size << 9;
 
 }
 
diff --git a/drbd/drbd_main.c b/drbd/drbd_main.c
index 8274e6a..52cf9fa 100644
--- a/drbd/drbd_main.c
+++ b/drbd/drbd_main.c
@@ -2448,61 +2448,82 @@ static int ro_open_cond(struct drbd_device *device)
 int drbd_open(struct block_device *bdev, fmode_t mode)
 {
 	long remaining_time;
+printk(KERN_INFO "drbd_open bdev: %p\n", bdev);
+printk(KERN_INFO "drbd_open bdev->bd_disk: %p\n", bdev->bd_disk);
+printk(KERN_INFO "drbd_open bdev->bd_disk->private_data: %p\n", bdev->bd_disk->private_data);
 	struct drbd_device *device = bdev->bd_disk->private_data;
 	struct drbd_resource *resource = device->resource;
 	int rv = 0;
 
+printk(KERN_INFO "drbd_open 1\n");
 	kref_get(&device->kref);
 	kref_debug_get(&device->kref_debug, 3);
 
+printk(KERN_INFO "drbd_open 2\n");
 	mutex_lock(&resource->open_release);
+printk(KERN_INFO "drbd_open 3\n");
 
 	if (mode & FMODE_WRITE)
 		device->open_rw_cnt++;
 	else
 		device->open_ro_cnt++;
+printk(KERN_INFO "drbd_open 4\n");
 
 	if (resource->res_opts.auto_promote) {
+printk(KERN_INFO "drbd_open 5\n");
 		enum drbd_state_rv rv;
 		/* Allow opening in read-only mode on an unconnected secondary.
 		   This avoids split brain when the drbd volume gets opened
 		   temporarily by udev while it scans for PV signatures. */
 
+printk(KERN_INFO "drbd_open 6\n");
 		if (mode & FMODE_WRITE) {
+printk(KERN_INFO "drbd_open 7\n");
 			if (resource->role[NOW] == R_SECONDARY) {
+printk(KERN_INFO "drbd_open 8\n");
 				rv = try_to_promote(device);
 				if (rv < SS_SUCCESS)
 					drbd_info(resource, "Auto-promote failed: %s\n",
 						  drbd_set_st_err_str(rv));
 			}
 		} else /* READ access only */ {
+printk(KERN_INFO "drbd_open 9\n");
 			wait_event_interruptible_timeout(remaining_time,
 							 resource->state_wait,
 							 ro_open_cond(device) != -EAGAIN,
 							 resource->res_opts.auto_promote_timeout * HZ / 10);
 		}
 	} else if (resource->role[NOW] != R_PRIMARY && !(mode & FMODE_WRITE) && !allow_oos) {
+printk(KERN_INFO "drbd_open a\n");
 		rv = -EMEDIUMTYPE;
 		goto out;
 	}
+printk(KERN_INFO "drbd_open b\n");
 
 	if (test_bit(UNREGISTERED, &device->flags))
 		rv = -ENODEV;
 
+printk(KERN_INFO "drbd_open c\n");
 	if (mode & FMODE_WRITE) {
+printk(KERN_INFO "drbd_open d\n");
 		if (resource->role[NOW] != R_PRIMARY)
 			rv = -EROFS;
 	} else /* READ access only */ {
+printk(KERN_INFO "drbd_open e\n");
 		if (!any_disk_is_uptodate(device) ||
 		    (resource->role[NOW] != R_PRIMARY &&
 		     primary_peer_present(resource) &&
 		     !allow_oos))
 			rv = -EMEDIUMTYPE;
 	}
+printk(KERN_INFO "drbd_open f\n");
 out:
+printk(KERN_INFO "drbd_open g\n");
 	mutex_unlock(&resource->open_release);
+printk(KERN_INFO "drbd_open h\n");
 	if (rv)
 		drbd_release(bdev->bd_disk, mode);
+printk(KERN_INFO "drbd_open i\n");
 	return rv;
 }
 
@@ -2760,11 +2781,6 @@ static void drbd_device_finalize_work_fn(struct work_struct *work)
 	if (device->this_bdev)
 		bdput(device->this_bdev);
 
-	if (device->vdisk->pDeviceExtension) {
-		// just in case existing a VolumeExtension
-		device->vdisk->pDeviceExtension->dev = NULL;
-	}
-
 	drbd_backing_dev_free(device, device->ldev);
 	device->ldev = NULL;
 
@@ -2788,6 +2804,8 @@ void drbd_destroy_device(struct kref *kref)
 	struct drbd_device *device = container_of(kref, struct drbd_device, kref);
 	struct drbd_peer_device *peer_device, *tmp;
 
+printk(KERN_INFO "drbd_destroy_device %p\n", device);
+
 	/* cleanup stuff that may have been allocated during
 	 * device (re-)configuration or state changes */
 
@@ -3441,15 +3459,20 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 	int vnr = adm_ctx->volume;
 	enum drbd_ret_code err = ERR_NOMEM;
 	bool locked = false;
+	struct block_device *block_device;
 
 	device = minor_to_device(minor);
 	if (device)
 		return ERR_MINOR_OR_VOLUME_EXISTS;
 
+	block_device = bdget(MKDEV(DRBD_MAJOR, minor));
+	if (block_device == NULL)
+		return ERR_NO_DISK;
+
 	/* GFP_KERNEL, we are outside of all write-out paths */
 	device = kzalloc(sizeof(struct drbd_device), GFP_KERNEL, '0CWD');
 	if (!device)
-		return ERR_NOMEM;
+		goto out_no_device;
 	kref_init(&device->kref);
 	kref_debug_init(&device->kref_debug, &device->kref, &kref_class_device);
 
@@ -3517,9 +3540,13 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 	sprintf(disk->disk_name, "drbd%d", minor);
 	disk->private_data = device;
 
-	device->this_bdev = bdget(MKDEV(DRBD_MAJOR, minor));
+	device->this_bdev = block_device;
 	/* we have no partitions. we contain only ourselves. */
 	device->this_bdev->bd_contains = device->this_bdev;
+	/* TODO: should go away, use bdev->bd_disk->private_data instead */
+	device->this_bdev->drbd_device = device;
+	/* TODO: leaks existing disk */
+	device->this_bdev->bd_disk = disk;
 
 	init_bdev_info(q->backing_dev_info, drbd_congested, device);
 
@@ -3619,6 +3646,7 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 	}
 
 	drbd_debugfs_device_add(device);
+
 	*p_device = device;
 	return NO_ERROR;
 
@@ -3658,7 +3686,11 @@ out_no_disk:
 	blk_cleanup_queue(q);
 out_no_q:
 	kref_put(&resource->kref, drbd_destroy_resource);
+	kref_debug_destroy(&device->kref_debug);
 	kfree(device);
+out_no_device:
+	bdput(block_device);
+
 	return err;
 }
 
@@ -3691,6 +3723,10 @@ void drbd_unregister_device(struct drbd_device *device)
 	destroy_workqueue(device->submit.wq);
 	device->submit.wq = NULL;
 	del_timer_sync(&device->request_timer);
+
+		/* TODO: Ask phil if that is correct */
+	bdput(device->this_bdev);
+	device->this_bdev = NULL;
 }
 
 void drbd_reclaim_device(struct rcu_head *rp)
diff --git a/drbd/drbd_nl.c b/drbd/drbd_nl.c
index ee6babf..5b1978d 100644
--- a/drbd/drbd_nl.c
+++ b/drbd/drbd_nl.c
@@ -45,6 +45,7 @@
 #include <linux/kthread.h>
 #include <linux/security.h>
 #include <net/genetlink.h>
+#include "drbd_windows.h"
 
 /* .doit */
 // int drbd_adm_create_resource(struct sk_buff *skb, struct genl_info *info);
@@ -2381,8 +2382,10 @@ static int open_backing_devices(struct drbd_device *device,
 static void close_backing_dev(struct drbd_device *device, struct block_device *bdev,
 	bool do_bd_unlink)
 {
+printk("1\n");
 	if (!bdev)
 		return;
+printk("2\n");
 	if (do_bd_unlink) {
 #if   defined(COMPAT_HAVE_BD_UNLINK_DISK_HOLDER)
 		bd_unlink_disk_holder(bdev, device->vdisk);
@@ -2390,17 +2393,22 @@ static void close_backing_dev(struct drbd_device *device, struct block_device *b
 		bd_release_from_disk(bdev, device->vdisk);
 #endif
 	}
+printk("3\n");
 	blkdev_put(bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL);
 }
 
 void drbd_backing_dev_free(struct drbd_device *device, struct drbd_backing_dev *ldev)
 {
+printk("1\n");
 	if (ldev == NULL)
 		return;
 
+printk("2\n");
 	close_backing_dev(device, ldev->md_bdev, ldev->md_bdev != ldev->backing_bdev);
+printk("3\n");
 	close_backing_dev(device, ldev->backing_bdev, true);
 
+printk("4\n");
 	kfree(ldev->disk_conf);
 	kfree(ldev);
 }
@@ -2828,6 +2836,7 @@ int drbd_adm_attach(struct sk_buff *skb, struct genl_info *info)
 	put_ldev(device);
 	mutex_unlock(&resource->adm_mutex);
 	drbd_adm_finish(&adm_ctx, info, retcode);
+
 	return 0;
 
  force_diskless_dec:
@@ -2918,6 +2927,7 @@ int drbd_adm_detach(struct sk_buff *skb, struct genl_info *info)
 	mutex_unlock(&adm_ctx.resource->adm_mutex);
 out:
 	drbd_adm_finish(&adm_ctx, info, retcode);
+
 	return 0;
 }
 
@@ -5490,6 +5500,7 @@ int drbd_adm_new_minor(struct sk_buff *skb, struct genl_info *info)
 		mutex_unlock(&notification_mutex);
 	}
 	mutex_unlock(&resource->conf_update);
+
 out:
 	drbd_adm_finish(&adm_ctx, info, retcode);
 	return 0;
diff --git a/drbd/resource.res b/drbd/resource.res
index 42aab66..4da5f6a 100755
Binary files a/drbd/resource.res and b/drbd/resource.res differ
