From 6616c18c2444786333665922ab6266d0f0e60019 Mon Sep 17 00:00:00 2001
From: Johannes Thoma <johannes@johannesthoma.com>
Date: Tue, 3 Oct 2017 17:09:09 +0200
Subject: [PATCH 09/15] Set device active on new minor.

Plus register block device in drbd_device.
---
 drbd/drbd_main.c | 27 +++++++++++++++++++++++++++
 drbd/drbd_nl.c   |  2 +-
 2 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/drbd/drbd_main.c b/drbd/drbd_main.c
index c1060a2..29dd575 100644
--- a/drbd/drbd_main.c
+++ b/drbd/drbd_main.c
@@ -2448,61 +2448,82 @@ static int ro_open_cond(struct drbd_device *device)
 int drbd_open(struct block_device *bdev, fmode_t mode)
 {
 	long remaining_time;
+printk(KERN_INFO "drbd_open bdev: %p\n", bdev);
+printk(KERN_INFO "drbd_open bdev->bd_disk: %p\n", bdev->bd_disk);
+printk(KERN_INFO "drbd_open bdev->bd_disk->private_data: %p\n", bdev->bd_disk->private_data);
 	struct drbd_device *device = bdev->bd_disk->private_data;
 	struct drbd_resource *resource = device->resource;
 	int rv = 0;
 
+printk(KERN_INFO "drbd_open 1\n");
 	kref_get(&device->kref);
 	kref_debug_get(&device->kref_debug, 3);
 
+printk(KERN_INFO "drbd_open 2\n");
 	mutex_lock(&resource->open_release);
+printk(KERN_INFO "drbd_open 3\n");
 
 	if (mode & FMODE_WRITE)
 		device->open_rw_cnt++;
 	else
 		device->open_ro_cnt++;
+printk(KERN_INFO "drbd_open 4\n");
 
 	if (resource->res_opts.auto_promote) {
+printk(KERN_INFO "drbd_open 5\n");
 		enum drbd_state_rv rv;
 		/* Allow opening in read-only mode on an unconnected secondary.
 		   This avoids split brain when the drbd volume gets opened
 		   temporarily by udev while it scans for PV signatures. */
 
+printk(KERN_INFO "drbd_open 6\n");
 		if (mode & FMODE_WRITE) {
+printk(KERN_INFO "drbd_open 7\n");
 			if (resource->role[NOW] == R_SECONDARY) {
+printk(KERN_INFO "drbd_open 8\n");
 				rv = try_to_promote(device);
 				if (rv < SS_SUCCESS)
 					drbd_info(resource, "Auto-promote failed: %s\n",
 						  drbd_set_st_err_str(rv));
 			}
 		} else /* READ access only */ {
+printk(KERN_INFO "drbd_open 9\n");
 			wait_event_interruptible_timeout(remaining_time,
 							 resource->state_wait,
 							 ro_open_cond(device) != -EAGAIN,
 							 resource->res_opts.auto_promote_timeout * HZ / 10);
 		}
 	} else if (resource->role[NOW] != R_PRIMARY && !(mode & FMODE_WRITE) && !allow_oos) {
+printk(KERN_INFO "drbd_open a\n");
 		rv = -EMEDIUMTYPE;
 		goto out;
 	}
+printk(KERN_INFO "drbd_open b\n");
 
 	if (test_bit(UNREGISTERED, &device->flags))
 		rv = -ENODEV;
 
+printk(KERN_INFO "drbd_open c\n");
 	if (mode & FMODE_WRITE) {
+printk(KERN_INFO "drbd_open d\n");
 		if (resource->role[NOW] != R_PRIMARY)
 			rv = -EROFS;
 	} else /* READ access only */ {
+printk(KERN_INFO "drbd_open e\n");
 		if (!any_disk_is_uptodate(device) ||
 		    (resource->role[NOW] != R_PRIMARY &&
 		     primary_peer_present(resource) &&
 		     !allow_oos))
 			rv = -EMEDIUMTYPE;
 	}
+printk(KERN_INFO "drbd_open f\n");
 out:
+printk(KERN_INFO "drbd_open g\n");
 	mutex_unlock(&resource->open_release);
+printk(KERN_INFO "drbd_open h\n");
 	if (rv)
 		drbd_release(bdev->bd_disk, mode);
+printk(KERN_INFO "drbd_open i\n");
 	return rv;
 }
 
@@ -3520,7 +3541,10 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 	device->this_bdev = block_device;
 	/* we have no partitions. we contain only ourselves. */
 	device->this_bdev->bd_contains = device->this_bdev;
+	/* TODO: should go away, use bdev->bd_disk->private_data instead */
 	device->this_bdev->drbd_device = device;
+	/* TODO: leaks existing disk */
+	device->this_bdev->bd_disk = disk;
 
 	init_bdev_info(q->backing_dev_info, drbd_congested, device);
 
@@ -3620,6 +3644,8 @@ enum drbd_ret_code drbd_create_device(struct drbd_config_context *adm_ctx, unsig
 	}
 
 	drbd_debugfs_device_add(device);
+	windrbd_set_drbd_device_active(device, 1);
+
 	*p_device = device;
 	return NO_ERROR;
 
@@ -3693,6 +3719,7 @@ void drbd_unregister_device(struct drbd_device *device)
 	device->submit.wq = NULL;
 	del_timer_sync(&device->request_timer);
 
+	windrbd_set_drbd_device_active(device, 0);
 	device->this_bdev->drbd_device = NULL;
 }
 
diff --git a/drbd/drbd_nl.c b/drbd/drbd_nl.c
index d72c5f1..8b0a5e3 100644
--- a/drbd/drbd_nl.c
+++ b/drbd/drbd_nl.c
@@ -2830,7 +2830,6 @@ int drbd_adm_attach(struct sk_buff *skb, struct genl_info *info)
 	mutex_unlock(&resource->adm_mutex);
 	drbd_adm_finish(&adm_ctx, info, retcode);
 
-	windrbd_set_drbd_device_active(device, 1);
 	return 0;
 
  force_diskless_dec:
@@ -5495,6 +5494,7 @@ int drbd_adm_new_minor(struct sk_buff *skb, struct genl_info *info)
 		mutex_unlock(&notification_mutex);
 	}
 	mutex_unlock(&resource->conf_update);
+
 out:
 	drbd_adm_finish(&adm_ctx, info, retcode);
 	return 0;
-- 
2.8.0-rc4

